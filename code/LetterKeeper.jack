class LetterKeeper
{
    static Array alphabet;

    field Array usedLetters;
    field int usedLettersCount;

    function void init()
    {
        var int i;
        
        let alphabet = Array.new(26);
        let i = 0;
        while (i < 26)
        {
            let alphabet[i] = 65 + i;
            let i = i + 1;
        }

        return;
    }

    function Array getAlphabet()
    {   
        return alphabet;
    }

    constructor LetterKeeper new()
    {
        let usedLettersCount = 0;
        let usedLetters = Array.new(26);

        return this;
    }

    method void dispose()
    {
        do usedLetters.dispose();
        do Memory.deAlloc(this);
        return;
    }

    function bool correctLetter(char c)
    {
        return (c > 64) & (c < 91);
    }

    method bool checkLetter(char c)
    {
        var bool result;
        var int i;
        var char currentChar;

        let result = true;

        let i = 0;
        while (i < usedLettersCount)
        {
            let currentChar = usedLetters[i];
            if (currentChar = c)
            {
                let result = false;
            }
        }

        return result;
    }

    method void useLetter(char c)
    {
        var bool isUsed;

        if (~LetterKeeper.correctLetter(c))
        {
            return;
        }

        let isUsed = checkLetter(c);

        if (~isUsed)
        {
            let usedLetters[usedLettersCount] = c;
            let usedLettersCount = usedLettersCount + 1;
        }

        return;
    }

    method void restart()
    {
        let usedLettersCount = 0;
        
        return;
    }
}