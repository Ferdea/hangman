class Circle
{
    field Vector Position;
    field int Radius;

    constructor Circle new(Vector position, int radius)
    {
        let Position = position;
        let Radius = radius;
        return this;
    }

    method void dispose()
    {
        do Position.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method Vector getPosition()
    {
        return Position;
    }

    method int getRadius()
    {
        return Radius;
    }

    method void setPosition(Vector position)
    {
        if (position.getX() < 0 | position.getX() + 2 * Radius > 511 |
            position.getY() < 0 | position.getY() + 2 * Radius > 255)
        {
            return;
        }
        do Position.dispose();
        let Position = position;
        return;
    }

    method void setRadius(int radius)
    {
        if (radius < 1)
        {
            return;
        }
        let Radius = radius;
        return;
    }

    method void move(Vector movement)
    {
        var Vector resultPosition;
        let resultPosition = Vector.add(Position, movement);
        if (resultPosition.getX() < 0 | resultPosition.getX() + 2 * Radius > 511 |
            resultPosition.getY() < 0 | resultPosition.getY() + 2 * Radius > 255)
        {
            return;
        }
        do Position.dispose();
        let Position = resultPosition;
        return;
    }

    method void draw()
    {
        do Screen.setColor(true);
        do Screen.drawCircle(Position.getX(), Position.getY(), Radius);
        return;
    }

    method void erase()
    {
        do Screen.setColor(false);
        do Screen.drawCircle(Position.getX(), Position.getY(), Radius);
        return;
    }
}